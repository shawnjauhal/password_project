import re
import random
from collections import Counter
import string
import json
import math

"""
Author:    Shawn Jauhal
Professor: Raymond Madachy
Date:      May 16th, 2019
Class:     CS 558 Computer Simulations
School:    San Diego State University

File: part2.py

Input - three files
passwords.txt
patterns.txt
classes.txt

These files are in JSON format, generated by running class, 
'store_passwords.py'.

It runs the simulation from 'part1.py' 2500 times, but with a smaller dataset.
Now we only pick 1000 random passwords from each dataset for each run.

It analyzes all three of our data sets for comparison.  It provides their
average, there standard devation, their mean within a 90% confidence interval,
and provides the primary hypothesis test.

The hypothesis test is set to see if there is a significant difference
in the average password diversity between passwords that are strictly
alphanumeric, and those that contain special characters.  This is tested
with a 90& confidence interval.

Sample Run 1:
The average value for the special set is:  0.037386066249383385
The average value for the letter set is:  0.2259578439967002
The average value for the alphanumeric set is:  0.04579006362066563
The standard deviatoion for the special set is:  0.0024140959014114804
The standard deviatoion for the letter set is:  0.003971175248707351
The standard deviatoion for the alphanumeric set is:  0.0022585165354294242
Means within a confidence interval of 90%:
Special set:
0.037306642494226945 - 0.037465490004539824
Letter set:
0.22582719233101772 - 0.22608849566238265
Alphanumeric set:
0.04571575842665 - 0.045864368814681256
Hypothesis Test:
False

Sample Run 2:
The average value for the special set is:  0.03742183361303022
The average value for the letter set is:  0.22580206290052393
The average value for the alphanumeric set is:  0.04581514994798591
The standard deviation for the special set is:  0.002532349807272311
The standard deviation for the letter set is:  0.003909944460249422
The standard deviation for the alphanumeric set is:  0.0021862162689529566
Means within a confidence interval of 90%:
Special set:
0.03733851930437096 - 0.03750514792168948
Letter set:
0.22567342572778173 - 0.22593070007326613
Alphanumeric set:
0.04574322343273736 - 0.045887076463234464
Hypothesis Test:
False

Sample Run 3:
The average value for the special set is:  0.03742295482627217
The average value for the letter set is:  0.2259313566186554
The average value for the alphanumeric set is:  0.045804845466331914
The standard deviatoion for the special set is:  0.0025415719069589904
The standard deviatoion for the letter set is:  0.0038510691107286684
The standard deviatoion for the alphanumeric set is:  0.002213419476616967
Means within a confidence interval of 90%:
Special set:
0.03733933711053322 - 0.03750657254201112
Letter set:
0.22580465644491243 - 0.22605805679239838
Alphanumeric set:
0.04573202396555122 - 0.04587766696711261
Hypothesis Test:
False

Results:
All three sample runs determine that there is no significant difference
between the average password diversity between the two datasets.
"""

def mean(list):
    """
    Calculates mean values amongst list of ints, floats, or doubles
    :param list: A list of floats, ints or doubles
    :return: The mean value amongst the list
    """
    return sum(list) / len(list)


def std_dev(list):
    """
    Calculates the standard deviation amongst a list.
    :param list: A list of floats, ints or doubles
    :return: The standard deviation amongst the list
    """
    average = mean(list)
    size = len(list)
    sum_of_set = 0
    for x in range(size):
        value = list[x] - average
        value = value * value
        sum_of_set += value
    return math.sqrt(sum_of_set / size)


def lower_limit(list):
    """
    Calculates the lower limit of the mean of a list, with a 90% confidence
    interval.
    :param list: The list we are using for the mean
    :return: The lower limit of the confidence interval
    """
    z = 1.645
    dev = std_dev(list)
    avg = mean(list)
    num = len(list)
    sqrt = math.sqrt(num)
    return avg - (z * (dev / sqrt))


def upper_limit(list):
    """
    Calculates the upper limit of the mean of a list, with a 90% confidence
    interval.
    :param list: The list we are using for the mean
    :return: The upper limit of the confidence interval
    """
    z = 1.645
    dev = std_dev(list)
    avg = mean(list)
    num = len(list)
    sqrt = math.sqrt(num)
    return avg + (z * (dev / sqrt))

def hypothesis_test(list1, list2):
    """
    Determines if there is a difference between the means of 2 lists
    , with a  confidence level of 90%(Both lists should be of equal size)
    :param list1: The first list we are comparing
    :param list2: The second list we are comparing
    :return:True if there is no significant difference between the two means,
    False if there is a significant difference
    """
    z = 1.645                      # Z score for our confidence level
    mean1 = mean(list1)            # mean of list 1
    mean2 = mean(list2)            # mean of list 2
    std_dev1 = std_dev(list1)      # standard deviation of list 1
    std_dev2 = std_dev(list2)      # standard deviation of list 2
    n = len(list1)          # length of list 1, which should be equal to list 2
    result = (mean1 - mean2) / math.sqrt((std_dev1 * std_dev1 / n) +
                                         (std_dev2 * std_dev2 / n))
    if (z * -1) < result and z > result:
        return True
    else:
        return False

"""
This generates our three dictionaries based upon the files stored
in JSON format.
"""

with open('patterns.txt') as json_file:
    pattern_dict = json.load(json_file)

with open('classes.txt') as json_file:
    class_dict = json.load(json_file)

with open('passwords.txt') as json_file:
    password_dictionary = json.load(json_file)

count = len(password_dictionary)

print("Total count in dataset: ", count)

regex = re.compile('[@_!#$%^&*()<>?/\|}{~:]') # define acceptable special characters
special = []
alpha = []
alnum = []

"""
This splits our password dictionary into three lists, depending
on our three datasets.
"""

for password in password_dictionary:
    if (regex.search(password.rstrip('\n'))):
        special.append(password.rstrip('\n'))
    if (password.rstrip('\n').isalpha()):
        alpha.append(password.rstrip('\n'))
    elif (password.rstrip('\n').isalnum() and
            re.search('[a-zA-Z]', password.rstrip('\n'))):
        alnum.append(password.rstrip('\n'))

print("Number of passwords in special set: ", len(special))
print("Number of passwords in letter set: ", len(alpha))
print("Number of passwords in alphanumeric set: ", len(alnum))

"""
Generates the average values for each run for each dataset.
"""

special_average = []
alpha_average = []
alnum_average = []

for x in range(2500):

    #Pick random 1000 passwords from each dataset
    special_only = random.sample(special, 1000)
    alpha_only = random.sample(alpha, 1000)
    alnum_only = random.sample(alnum, 1000)

    #Analyze the special only password set.
    probabilities = []
    for password in special_only:
        pattern_class = ""
        structure = ""
        previous_char = ''

        #Finds pattern class of given password
        for character in password:
            if (character.islower()):
                structure += "L"
            elif (character.isupper()):
                structure += "U"
            elif (character.isdigit()):
                structure += "D"
            else:
                structure += "O"

        # Finds pattern of given password
        for character in password:
            if (character.islower() and previous_char != 'L'):
                pattern_class += "L"
                previous_char = 'L'
            elif (character.isupper() and previous_char != 'U'):
                pattern_class += "U"
                previous_char = 'U'
            elif (character.isdigit() and previous_char != 'D'):
                pattern_class += "D"
                previous_char = 'D'
            elif((ord(character) < 48 or (ord(character) > 58 and ord(character)
                                          < 65) or (ord(character) > 90 and
                                                    ord(character) < 97) or
                  ord(character) > 122) and previous_char != 'O'):
                pattern_class += "O"
                previous_char = 'O'
        probability = pattern_dict.get(structure) / class_dict.get(pattern_class)
        if probability != 1:
            probabilities.append(probability)
    if (len(probabilities) != 0):
        special_average.append(mean(probabilities))

    #Analyze the letter only dataset
    probabilities = []
    for passwords in alpha_only:
        pattern_class = ""
        structure = ""
        previous_char = ''

        # Finds pattern class of given password
        for character in passwords:
            if (character.islower()):
                structure += "L"
            elif (character.isupper()):
                structure += "U"

        # Finds pattern of given password
        for character in passwords:
            if (character.islower() and previous_char != 'L'):
                pattern_class += "L"
                previous_char = 'L'
            elif (character.isupper() and previous_char != 'U'):
                pattern_class += "U"
                previous_char = 'U'

        probability = pattern_dict.get(structure) / class_dict.get(pattern_class)
        if probability != 1:
            probabilities.append(probability)
    if (len(probabilities) != 0):
        alpha_average.append(mean(probabilities))
        #alpha_average.append(numpy.average(probabilities))

    #Analyze the alphanumeric dataset
    probabilities = []
    for passwords in alnum_only:
        pattern_class = ""
        structure = ""
        previous_char = ''

        # Finds pattern class of given password
        for character in passwords:
            if (character.islower()):
                structure += "L"
            elif (character.isupper()):
                structure += "U"
            else:
                structure += "D"

        # Finds pattern of given password
        for character in passwords:
            if (character.islower() and previous_char != 'L'):
                pattern_class += "L"
                previous_char = 'L'
            elif (character.isupper() and previous_char != 'U'):
                pattern_class += "U"
                previous_char = 'U'
            elif (character.isdigit() and previous_char != 'D'):
                pattern_class += "D"
                previous_char = 'D'
        pattern_count = pattern_dict.get(structure)
        class_count = class_dict.get(pattern_class)
        if pattern_count is not None and class_count is not None:
            probability = pattern_count / class_count
            if probability != 1:
                probabilities.append(probability)
    if (len(probabilities) != 0):
        alnum_average.append(mean(probabilities))

#Print out statistics at the end of the run.
print("The average value for the special set is: ", mean(special_average))
print("The average value for the letter set is: ", mean(alpha_average))
print("The average value for the alphanumeric set is: ", mean(alnum_average))

print("The standard deviation for the special set is: ", std_dev(special_average))
print("The standard deviation for the letter set is: ", std_dev(alpha_average))
print("The standard deviation for the alphanumeric set is: ", std_dev(alnum_average))

print("Means within a confidence interval of 90%:")
print("Special set:")
print(lower_limit(special_average), "-", upper_limit(special_average))
print("Letter set:")
print(lower_limit(alpha_average), "-", upper_limit(alpha_average))
print("Alphanumeric set:")
print(lower_limit(alnum_average), "-", upper_limit(alnum_average))

print("Hypothesis Test:")
print(hypothesis_test(special_average,alnum_average))