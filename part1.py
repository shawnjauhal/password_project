import re
import random
import seaborn as sns
from collections import Counter
import matplotlib.pyplot as plt
import numpy
import string
import json


"""
Author:    Shawn Jauhal
Professor: Raymond Madachy
Date:      May 16th, 2019
Class:     CS 558 Computer Simulations
School:    San Diego State University

File: part1.py

Input - three files
passwords.txt
patterns.txt
classes.txt

These files are in JSON format, generated by running class, 
'store_passwords.py'.

Output:
Generates mean values for total values generated from each set.
It then creates histograms to analyze the values generated from this
code.

Special Character Set:
0.03650210327637115
Letter Set:
0.2281921499968254
Alphanumeric Set:
0.04579413121121829
"""

sns.set()

"""
This generates our three dictionaries based upon the files stored
in JSON format.
"""

with open('patterns.txt') as json_file:
    pattern_dict = json.load(json_file)

with open('classes.txt') as json_file:
    class_dict = json.load(json_file)

with open('passwords.txt') as json_file:
    password_dictionary = json.load(json_file)

count = len(password_dictionary)

print(count)
regex = re.compile('[@_!#$%^&*()<>?/\|}{~:]')
special_only = []
alpha_only = []
alnum_only = []

"""
This splits our password dictionary into three lists, depending
on our three datasets.
"""

for password in password_dictionary:
    if (regex.search(password.rstrip('\n'))):
        special_only.append(password.rstrip('\n'))
    if (password.rstrip('\n').isalpha()):
        alpha_only.append(password.rstrip('\n'))
    elif (password.rstrip('\n').isalnum() and
            re.search('[a-zA-Z]', password.rstrip('\n'))):
        alnum_only.append(password.rstrip('\n'))

print(len(special_only))
print(len(alpha_only))
print(len(alnum_only))

#Pick random 2500 passwords from each dataset
special_only = random.sample(special_only, 2500)
alpha_only = random.sample(alpha_only, 2500)
alnum_only = random.sample(alnum_only, 2500)
probabilities = []

#Analyze the special only password set.
for password in special_only:
    pattern_class = ""
    structure = ""
    previous_char = ''

    # Finds pattern class of given password
    for character in password:
        if (character.islower()):
            structure += "L"
        elif (character.isupper()):
            structure += "U"
        elif (character.isdigit()):
            structure += "D"
        else:
            structure += "O"

    # Finds pattern of given password
    for character in password:
        if (character.islower() and previous_char != 'L'):
            pattern_class += "L"
            previous_char = 'L'
        elif (character.isupper() and previous_char != 'U'):
            pattern_class += "U"
            previous_char = 'U'
        elif (character.isdigit() and previous_char != 'D'):
            pattern_class += "D"
            previous_char = 'D'
        elif((ord(character) < 48 or (ord(character) > 58 and ord(character)
                                      < 65) or (ord(character) > 90 and
                                                ord(character) < 97) or
              ord(character) > 122) and previous_char != 'O'):
            pattern_class += "O"
            previous_char = 'O'
    probability = pattern_dict.get(structure) / class_dict.get(pattern_class)
    if probability != 1:
        probabilities.append(probability)

#Generate histogram from special character set
plt.hist(probabilities, bins='auto')
plt.title("Password Diversity For Special Character Set")
plt.show()
print(numpy.average(probabilities))

#Analyze the letter only dataset
probabilities = []
for passwords in alpha_only:
    pattern_class = ""
    structure = ""
    previous_char = ''

    # Finds pattern class of given password
    for character in passwords:
        if (character.islower()):
            structure += "L"
        elif (character.isupper()):
            structure += "U"

    # Finds pattern of given password
    for character in passwords:
        if (character.islower() and previous_char != 'L'):
            pattern_class += "L"
            previous_char = 'L'
        elif (character.isupper() and previous_char != 'U'):
            pattern_class += "U"
            previous_char = 'U'

    probability = pattern_dict.get(structure) / class_dict.get(pattern_class)
    if probability != 1:
        probabilities.append(probability)

#Generate histogram from letter set
plt.hist(probabilities, bins='auto')
plt.title("Password Diversity For Letters Only Set")
plt.show()
print(numpy.average(probabilities))

#Analyze the alphanumeric dataset
probabilities = []
for passwords in alnum_only:
    pattern_class = ""
    structure = ""
    previous_char = ''

    # Finds pattern class of given password
    for character in passwords:
        if (character.islower()):
            structure += "L"
        elif (character.isupper()):
            structure += "U"
        else:
            structure += "D"

    # Finds pattern of given password
    for character in passwords:
        if (character.islower() and previous_char != 'L'):
            pattern_class += "L"
            previous_char = 'L'
        elif (character.isupper() and previous_char != 'U'):
            pattern_class += "U"
            previous_char = 'U'
        elif (character.isdigit() and previous_char != 'D'):
            pattern_class += "D"
            previous_char = 'D'
    probability = pattern_dict.get(structure) / class_dict.get(pattern_class)
    if probability != 1:
        probabilities.append(probability)

#Generate histogram from alphanumeric set
plt.hist(probabilities, bins='auto')
plt.title("Password Diversity For Alphanumeric Set")
plt.show()
print(numpy.average(probabilities))